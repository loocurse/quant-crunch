from fastapi import APIRouter

from services import get_tickers_metadata
from utils.constants import Tickers
from utils.custom_types import (
    OpenPositionModel,
    PerformanceMongoModel,
    PerformanceResponse,
    RecommendationsMongoModel,
    RecommendationsResponse,
    RequestExtended,
    SnapshotModel,
    TickerlistResponse,
)

api_router = APIRouter()


@api_router.get("/tickerlist", response_model=TickerlistResponse)
def get_ticker_list(request: RequestExtended):
    """
    return list of tickers
    """
    tickers_metadata = get_tickers_metadata(request.app)
    params = {"tickers": ",".join(Tickers)}
    res = request.app.polygon.stocks_equities_snapshot_all_tickers(**params)
    for snapshot in res.tickers:
        s = SnapshotModel(**snapshot)
        tickers_metadata[s.ticker].update(
            {
                "change": s.todaysChange,
                "change_perc": s.todaysChangePerc,
            }
        )
    return {"tickerlist": list(tickers_metadata.values())}


@api_router.get("/recommendations", response_model=RecommendationsResponse)
def get_recommendations(request: RequestExtended, limit: int = 50):
    """
    returns the latest recommendations generated by the algorithm.
    """
    results = request.app.db.recommendations.find().sort("_id", -1).limit(100)
    results = [RecommendationsMongoModel(**i) for i in results]
    recent_recommendations: list[OpenPositionModel] = []
    for period in results:
        period.set_fields()
        recent_recommendations.extend(period.recommendations)
    recent_recommendations = recent_recommendations[:limit]
    return {"results": recent_recommendations}


@api_router.get("/performance", response_model=PerformanceResponse)
def get_performance(request: RequestExtended):
    documents = [PerformanceMongoModel(**i) for i in request.app.db.performance.find()]
    return {"performance": [i.dict(exclude={"id"}) for i in documents]}
